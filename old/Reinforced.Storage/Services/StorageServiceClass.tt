<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var implementationsCount = 7;
#>
using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Reinforced.Storage.SideEffects.Exact;
using Reinforced.Storage.Testing.Stories;

namespace Reinforced.Storage.Services {

	

	/// <summary>
    /// Interface that makes storage service to have context of 1 instance
    /// </summary> 
	public interface IContext<in T> : IWithContext
	{
		/// <summary>
		/// Imports context into service
		/// </summary>
		void Context(T ctx);
	}

	public static partial class DoExtensions
    {

		/// <summary>
        /// Binds context to service
        /// </summary>
        /// <typeparam name="TService">Type of service</typeparam>
        /// <typeparam name="T1">Type of context variable #1</typeparam>	
		/// <param name="db">Service builder</param>
        /// <param name="arg1">Context variable of type <typeparamref name="T1"></typeparamref> #1</param>
		/// <returns>Service instance</returns>
		public static TService Within<TService, T1>(this LetBuilder<TService> db, T1 arg1) 
			where TService : StorageService, IContext<T1>
        {
            return db.Init(new[] { typeof(T1) }, new object[] { arg1 });
        }    
	<# for (int i=0;i<implementationsCount;i++) {	#> 

		/// <summary>
        /// Binds context to service
        /// </summary>
        /// <typeparam name="TService">Type of service</typeparam>
        /// <typeparam name="T1">Type of context variable #1</typeparam>
		<# for(int j =0;j<=i;j++) { #>
/// <typeparam name="T<#= j+2 #>">Type of context variable #<#= j+2 #></typeparam>		
		<# } #>
/// <param name="db">Service builder</param>
        /// <param name="arg1">Context variable of type <typeparamref name="T1"></typeparamref> #1</param>
		<# for(int j =0;j<=i;j++) { #>
/// <param name="arg<#= j+2 #>">Context variable of type <typeparamref name="T<#= j+2 #>"></typeparamref> #<#= j+2 #></param>		
		<# } #>
/// <returns>Service instance</returns>
		public static TService Within<TService, T1<# for(int j =0;j<=i;j++) { #>, T<#= j+2 #><# } #>>(this LetBuilder<TService> db, T1 arg1<# for(int j =0;j<=i;j++) { #>, T<#= j+2 #> arg<#= j+2 #><# } #>) 
			where TService : StorageService, IContext<T1<# for(int j =0;j<=i;j++) { #>, T<#= j+2 #><# } #>>
        {
            return db.Init(
			new[]{ typeof(T1)<# for(int j =0;j<=i;j++) { #>, typeof(T<#= j+2 #>)<# } #> }
			,new object[] { arg1<# for(int j =0;j<=i;j++) { #>, arg<#= j+2 #><# } #> });
        }       
	<# } #>
    }
<# for (int i=0;i<implementationsCount;i++) {	#> 
	
	/// <summary>
    /// Interface that makes storage service to have context of <#= i+2 #> instances
    /// </summary>
	public interface IContext<in T1<# for(int j =0;j<=i;j++) { #>, in T<#= j+2 #><# } #>> : IWithContext
	{
		/// <summary>
		/// Imports context into service
		/// </summary>
		void Context(T1 ctx1<# for(int j =0;j<=i;j++) { #>, T<#= j+2 #> ctx<#= j+2 #> <# } #>);
	}

	/// <summary>
    /// Storage services that touches <#= i+2#> entities
    /// </summary>    
	public class StorageService<T1<# for(int j =0;j<=i;j++) { #>, T<#= j+2 #><# } #>>
			   : StorageService<T1<# for(int j =0;j<=i-1;j++) { #>, T<#= j+2 #><# } #>>
			   where T1: class
			   <# for(int j =0;j<=i;j++) { #>
where T<#= j+2 #> : class
			   <# } #>
    {
		/// <summary>
        /// Adds entity <typeparamref name="T<#= i+2 #>"/>
        /// </summary>
        /// <param name="entity">Entity to be added to storage</param>
		[Unexplainable]
        protected virtual AddSideEffect Add(T<#= i+2 #> entity)  { return ControlledAdd(entity); }

		/// <summary>
        /// Updates entity <typeparamref name="T<#= i+2 #>"/>
        /// </summary>
        /// <param name="entity">Entity to be updated storage</param>
		[Unexplainable]
        protected virtual UpdateSideEffect Update(T<#= i+2 #> entity) { return ControlledUpdate(entity); }

		/// <summary>
        /// Updates entity <typeparamref name="T<#= i+2 #>"/>
        /// </summary>
        /// <param name="entity">Entity to be updated storage</param>
		[Unexplainable]
        protected virtual UpdateSideEffect Update(T<#= i+2 #> entity, params Expression<Func<T<#= i+2 #>, object>>[] properties) { return ControlledUpdate(entity,properties); }

		/// <summary>
        /// Removes entity <typeparamref name="T<#= i+2 #>"/>
        /// </summary>
        /// <param name="entity">Entity to be removed from storage</param>
		[Unexplainable]
        protected virtual RemoveSideEffect Remove(T<#= i+2 #> entity) { return ControlledRemove(entity); }

		/// <summary>
		/// Set of entities types that are being touched by this service
		/// </summary> 
		public new static IEnumerable<Type> UsedEntities 
		{ 
			get 
			{ 
				<# for (int k=0;k<=i+1;k++) {	#> yield return typeof(T<#= k+1 #>); 
				<# } #>

			}
		}

		/// <summary>
		/// Set of entities types that are being touched by this service
		/// </summary> 
		protected override HashSet<Type> EntitiesUsed { get; } = new HashSet<Type>(new[] { 
				<# for (int k=0;k<=i+1;k++) {	#> typeof(T<#= k+1 #>), 
				<# } #> 
		});
    }

<# } #>
}