<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	var implementationsCount = 8;
#>

using System;
using System.Linq;
using System.Linq.Expressions;
using Reinforced.Tecture.Features.Orm.Commands.Add;

namespace Reinforced.Tecture.Features.Orm.PrimaryKey
{

<# for (int i=1;i<implementationsCount;i++) {	#> 

	public interface IPrimaryKey<<#= GenericsStroke(i+1) #>>
	{
		(<#= KeyParameters(i+1) #>) PrimaryKey { get; }
	}
<# } #>

	public static partial class Extensions
	{
        private static object ToTuple((Type,object)[] tupleValues)
        {
            if (tupleValues.Length == 1) return tupleValues[0].Item2;
<# for (int i=2;i<=implementationsCount;i++) {	#> 
            if(tupleValues.Length == <#= i#>)
            {
                var vt = typeof(System.Tuple<<#= Comas(i-1) #>>).MakeGenericType(tupleValues.Select(x=>x.Item1).ToArray());
                return Activator.CreateInstance(vt,tupleValues.Select(x=>x.Item2).ToArray());
            }
<# } #>
            
            throw new Exception($"Cannot create tuple of {tupleValues.Length} values");
        }
<# for (int i=1;i<implementationsCount;i++) {	#> 
		       
        public static (<#= GenericsStroke(i+1) #>) Key<<#= GenericsStroke(i+1) #>>(this IPrimaryKey<<#= GenericsStroke(i+1) #>> k)
        {
            var ks = k.PrimaryKey;
            <# 
                var s = Enumerable.Range(1,i+1).Select(x=>$"Value<T{x}>(k, ks.Item{x})").ToArray();
            #>

            return (<#= string.Join(",",s) #>);
        }
<# } #>
	}
}

<#+

    private string Comas(int num)
    {
        return new string(',',num);
    }
    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
		}
		return sb.ToString();
    }

	private string KeyParameters(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("Expression<Func<T"); sb.Append(i+1);
			sb.Append(">>");
		}
		return sb.ToString();
    }
#>