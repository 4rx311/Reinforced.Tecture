<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var implementationsCount = 8;
#>
using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Reinforced.Tecture.Channels;
// ReSharper disable UnusedMember.Global
namespace Reinforced.Tecture.Features.Orm.Commands.Relate
{
    /// <summary>
    /// Relate command extensions
    /// </summary>
    public static partial class Extensions
    {
<# for (int i=0;i<=implementationsCount;i++) {	#> 
    <# for (int j=0;j<i;j++) {	#>         

        /// <summary>
        /// Creates one-to-many relation between two entities
        /// </summary><# for (int k=1;k<=i;k++) {	#> 
        /// <typeparam name="T<#= k #>"></typeparam> <# } #>

        /// <typeparam name="TField"></typeparam>
        /// <param name="c">ORM channel write end</param>
        /// <param name="entity">Entity to create relation from</param>
        /// <param name="key">Relation key property</param>
        /// <param name="related">Related entity</param>
        /// <returns>Relate command</returns>
        public static Relate Relate<<#= GenericsStroke(i) #>,TField>(this Write<CommandChannel<Command>,<#= GenericsStroke(i) #>> c, T<#= j+1 #> entity, Expression<Func<T<#= j+1 #>,TField>> key, TField related)
        {
            return RelateCore(c, entity, GetKey(key), related);
        }

        /// <summary>
        /// Creates one-to-many relation between two entities
        /// </summary><# for (int k=1;k<=i;k++) {	#> 
        /// <typeparam name="T<#= k #>"></typeparam> <# } #>

        /// <typeparam name="TField"></typeparam>
        /// <param name="c">ORM channel write end</param>
        /// <param name="entity">Entity to create relation from</param>
        /// <param name="key">Relation key property (collection)</param>
        /// <param name="related">Related entity</param>
        /// <returns>Relate command</returns>
        public static Relate Relate<<#= GenericsStroke(i) #>,TField>(this Write<CommandChannel<Command>,<#= GenericsStroke(i) #>> c, T<#= j+1 #> entity, Expression<Func<T<#= j+1 #>,IEnumerable<TField>>> key, TField related)
        {
            return RelateCore(c, entity, GetKey(key), related);
        }
       
    <# } #>
    <# } #>
    }
}

<#+
    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
		}
		return sb.ToString();
    }
#>