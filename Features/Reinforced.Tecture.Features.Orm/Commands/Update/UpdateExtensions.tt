<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var implementationsCount = 8;
#>

using System;
using System.Linq.Expressions;
using Reinforced.Tecture.Commands;
using Reinforced.Tecture.Channels;

namespace Reinforced.Tecture.Features.Orm.Commands.Update
{
    public static partial class Extensions
    {
<# for (int i=0;i<=implementationsCount;i++) {	#> 
    <# for (int j=0;j<i;j++) {	#>

        /// <summary>
        /// Registers update for entity of type <typeparamref name="T<#= j+1 #>"/>
        /// </summary><# for (int k=1;k<=i;k++) {	#> 
        /// <typeparam name="T<#= k #>"></typeparam> <# } #>

        /// <param name="c">ORM Channel Write End</param>
        /// <param name="entity">Entity to update</param>
        /// <returns>Fluent</returns>
        public static Update<T<#= j+1 #>> Update<<#= GenericsStroke(i) #>>(this Write<CommandChannel<Command>,<#= GenericsStroke(i) #>> c, T<#= j+1 #> entity)
        {
            return UpdateCore<T<#= j+1 #>>(c, entity);
        }
    <# } #>
    <# } #>    
    }
}

<#+
    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
		}
		return sb.ToString();
    }
#>