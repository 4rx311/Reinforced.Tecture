<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
	var implementationsCount = 8;
#>

using Reinforced.Tecture.Features.Orm.PrimaryKey;

namespace Reinforced.Tecture.Features.Orm.Commands.DeletePk
{
    public static partial class Extensions
    {
    <# for (int i=1;i<implementationsCount;i++) {	#> 
        public static DeletePk ByPk<<#= GenericsStroke(i) #>>
            (this IPrimaryKeyOperation<DeletePk, IPrimaryKey<<#= GenericsStroke(i) #>>> c, <#= GenericsStrokeParameters(i) #>)
        {
            var a = (DeletePkOperationBase) c;
            return DeletePkCore(a.Write, a.EntityType, <#= GenericsStrokeArguments(i) #>);
        }
    <# } #>
    }
}

<#+

    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
		}
		return sb.ToString();
    }

    private string GenericsStrokeParameters(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
            sb.Append(" v"); sb.Append(i+1);
		}
		return sb.ToString();
    }

    private string GenericsStrokeArguments(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("v"); sb.Append(i+1);
		}
		return sb.ToString();
    }

#>