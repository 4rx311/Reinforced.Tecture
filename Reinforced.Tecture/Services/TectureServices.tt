<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var implementationsCount = 7;
#>

using Reinforced.Tecture.Channels;



namespace Reinforced.Tecture.Services {	
	
<# for (int i=0;i<implementationsCount;i++) {	#> 
	

	/// <summary>
    /// Storage services that touches <#= i+2#> entities
    /// </summary>    
	public class TectureService<<#= GenericsStroke(i+2) #>>
			   : TectureServiceBase
			   where T1: class
			   <# for(int j =0;j<=i;j++) { #>
where T<#= j+2 #> : class
			   <# } #>

    {

        /// <summary>
        /// Gets reading end of channel <typeparamref name="T"/>
        /// </summary>
        /// <typeparam name="T">Channel to obtain read end of</typeparam>
        /// <returns>Channel's read end</returns>
        protected Read<T, <#= GenericsStroke(i+2) #>> From<T>() where T : CanQuery
        {
            return new SRead<T, <#= GenericsStroke(i+2) #>>(ChannelMultiplexer);
        }		

        /// <summary>
        /// Gets writing end of channel <typeparamref name="T"/>
        /// </summary>
        /// <typeparam name="T">Channel to obtain write end of</typeparam>
        /// <returns>Channel's write end</returns>
		protected Write<T, <#= GenericsStroke(i+2) #>> To<T>() where T : CanCommand
        {
            return new SWrite<T, <#= GenericsStroke(i+2) #>>(ChannelMultiplexer, Pipeline);
        }	
    }

<# } #>
}

<#+
    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
		}
		return sb.ToString();
    }
#>